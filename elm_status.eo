import elm_general;

/* Enumerations - only named and global or in typedef */
enum MOOD {
happy, [[docs; also, for C usage, field names get uppercased and
prefixed with MOOD in this case]]
sad
}

/* Enums allow basic expressions in them; they're purely numerical,
* evaluated at generation time, and can contain constants (but not variables)
*/
enum VISIBILITY {
[[enum docs]]
online, offline
}

class Elm.Status(Elm.Layout)
{
   data: Elm_Status_Data;
   eo_prefix: elm_status;

   methods {
        @property status {
             set {
             }
             get {
             }
             values {
               txt: const(char)*;
             }
        }
	@property mood  {

		      [[Mood of the person. This can be one of the supported moods like 'happy, sad, excited etc.']]
			      set {
				      [[set the changed mood of person]]
			      }
		      get {
			      [[get the current mood of person]]
			      }
			      values {
				mood: MOOD;
			      }
	      }
		@property picture  {

		      [[Display picture of person]]
		      set {
			      [[set the display picture]]
		      }
		      get {
			      [[get the display pictue]]
			      }
			      values { // you can optionally specify keys and values in get/set too
				picture: char*;
			      }
	      }
		@property visibility  {

		      [[Visibility of person. This can be one of the supported mode like online, offline etc.]]
		      set {
			      [[set the visibility mode]]
		      }
		      get {
			      [[get the visibility mode]]
			      }
			      values { // you can optionally specify keys and values in get/set too
				visibility: VISIBILITY;
			      }
	      }

   }
   implements {
        class.constructor;
        Eo.Base.constructor;
        Eo.Base.destructor;
        Evas.Object_Smart.add;
        Evas.Object_Smart.del;
        Elm.Widget.event;
        Elm.Widget.theme_apply;
     }
}
